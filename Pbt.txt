Q1[Reverse a string in O(n)]
import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    Scanner s=new Scanner(System.in);
	    int n=s.nextInt();
	    int[] a=new int[n];
	    int temp=0;
	    for(int i=0;i<n;i++)
	    a[i]=s.nextInt();
	    for(int i=0;i<n/2;i++)
	    {
	        temp=a[i];
	        a[i]=a[n-1-i];
	        a[n-1-i]=temp;
	        System.out.print(a[i]+" ");
	    }
	    for(int i=n/2;i<n;i++)
	       System.out.print(a[i]+" ");
	}
}

===========================================================================
Q2[Anagrams]
import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    Scanner s=new Scanner(System.in);
	    String a=s.nextLine();
	    String b=s.nextLine();
	    int []ar1=new int[26];
	    int []ar2=new int[26];
	    for(int i=0;i<25;i++)
	    {
	        ar1[i]=0;
	        ar2[i]=0;
	    }
	    for(int i=0;i<a.length();i++)
	    {
	        if(a.charAt(i)>=97 && a.charAt(i)<=122)
	        ar1[a.charAt(i)-97]+=1;
	    }
	    for(int i=0;i<b.length();i++)
	    {
	        if(b.charAt(i)>=97 && b.charAt(i)<=122)
	        ar2[b.charAt(i)-97]+=1;
	    }
	    int f=0;
	    for(int i=0;i<25;i++)
	    {
	        if(ar1[i]!=ar2[i])
	        {
	            f=1;
	            break;
	        }
	    }
	    if(f==0)
	    System.out.println("They are anagrams");
	    else
	    System.out.println("They are not anagrams");
	}
}

=====================================================================================
Q3[Duplicates element in a array]
public class Main
{
	public static void main(String[] args) {
	    int[] a= new int[]{1,2,3,3,6,1,3};
	    int l=a.length;
	    for(int i=0;i<l;i++)
	    a[a[i]%l]=a[a[i]%l]+l;
	    for(int i=0;i<l;i++)
	    if(a[i]>(2*l))
	    System.out.print(i+" ");
	}
}

=====================================================================================
Q4[Reservoir sampling]
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		int ar[]={1,2,3,4,5,6,7,8,9,10,11,12};
		int n=ar.length;
		int k=5;
		stream(ar,n,k);
	}
	
	static void stream(int ar[],int n,int k)
	{
	    int i;
	    int[] op=new int[k];
	    for(i=0;i<k;i++)
	    op[i]=ar[i];
	    Random r=new Random();
	    for(;i<n;i++)
	    {
	        int j=r.nextInt(i+1);
	        if(j<k)
	        op[j]=ar[i];
	    }
	    System.out.print(Arrays.toString(op));
	}
===========================================================================================
Q5[middle element of linked list]
class LinkedList{
    static Node head;
    static class Node{
        int data;
        Node next;
        Node(int d){
            data=d;
            next=null;
        }
    }
    void printlist(Node node) 
    { 
        if (node == null) { 
            return; 
        } 
        while (node != null) { 
            System.out.print(node.data + " -> "); 
            node = node.next; 
        } 
    }
    void middleElement(Node node)
    {
        Node slow=node;
        Node fast=node.next;
        while(fast!=null && fast.next!=null)
        {
            fast=fast.next.next;
            slow=slow.next;
        }
        System.out.print("The middle element is "+slow.data);
    }
}
public class Main extends LinkedList
{
	public static void main(String[] args) {
	    LinkedList l=new LinkedList();
	    l.head=new Node(1);
	    l.head.next = new Node(2); 
        l.head.next.next = new Node(3); 
        l.head.next.next.next = new Node(4); 
        l.head.next.next.next.next = new Node(5);
        System.out.print("The order of the list is ");
        l.printlist(head);
        System.out.println();
        l.middleElement(head);
	}
}
=================================================================================
Q6[Reverse a linked list]
class LinkedList{
    static Node head;
    static class Node{
        int data;
        Node next;
        Node(int d){
            data=d;
            next=null;
        }
    }
    Node reverse(Node node){
        Node prev=null;
        Node current=node;
        Node next=null;
        while(current!=null){
            next=current.next;
            current.next=prev;
            prev=current;
            current=next;
        }
        return prev;
    }
    
    void print(Node node){
        while (node != null) { 
            System.out.print(node.data + " "); 
            node = node.next; 
        } 
    }
}
public class Main extends LinkedList
{
	public static void main(String[] args) {
	    LinkedList l=new LinkedList();
	    l.head=new Node(1);
	    l.head.next=new Node(2);
	    l.head.next.next=new Node(3);
	    l.head.next.next.next=new Node(4);
	    System.out.print("The ll is ");
	    l.print(head);
	    head=l.reverse(head);
	    System.out.println(" ");
	    System.out.print("The ll after reverse is  ");
	    l.print(head);
	    
	}
}

===========================================================================
Q7[Greatest Element in a stack]
import java.util.*;
    class Mystack{
        Stack<Integer> s = new Stack<Integer>(); 
        int max;
    
    void greatestElement(){
        System.out.print("Greatest Element is "+max+"\n");
    }
    void pop(){
        int t=s.peek();
        s.pop();
        if(t>max)
        {
            System.out.print("The poped element is "+max+"\n");
            max=2*max-t;
        }
        else
        System.out.print(t+"\n");
    }
    void push(int data){
        if(s.empty()){
            max=data;
            s.push(data);
            System.out.print("The pushed element is "+data+"\n");
        }
        if(data>max){
            s.push(2*data-max);
            System.out.print("The pushed element is "+data+"\n");
            max=data;
        }
        else{
        s.push(data);
        System.out.print("The pushed element is "+data+"\n");
        }
    }
    
    
}

public class Main extends Mystack
{
	public static void main(String[] args) {
	    Mystack t=new Mystack();
	    t.push(3);
	    t.push(67);
	    t.push(89);
	    t.greatestElement();
	    t.pop();
	    t.greatestElement();
	}
}

=======================================================================================
Q8[Queue using stacks]
import java.util.*;
    class Queue{
        static Stack<Integer> s1=new Stack<Integer>();
        static Stack<Integer> s2=new Stack<Integer>();
        static void enqueue(int data){
            while(!s1.isEmpty()){
                s2.push(s1.pop());
            }
            s1.push(data);
            while(!s2.isEmpty()){
                s1.push(s2.pop());
            }
        }
        static void dequeue(){
            if(s1.isEmpty()){
                System.out.println("The Queue is empty"+"\n");
            }
            else{
                int p=s1.peek();
                s1.pop();
                System.out.print("The removed element is "+p+"\n");
            }
        }
    }
public class Main extends Queue
{
	public static void main(String[] args) {
	    Queue q=new Queue();
	    q.enqueue(1);
	    q.enqueue(5);
	    q.enqueue(8);
	    q.dequeue();
	    q.dequeue();
	    q.dequeue();
	}
}
===========================================================================================